import React, { lazy, Suspense, useEffect, useRef, useState } from "react";
import {
  Settings,
  RefreshCw,
  Building2,
  Map as MapIcon,
  Info as InfoIcon,
  Satellite,
} from "lucide-react";
import { collection, getDocs, orderBy, query } from "firebase/firestore";
import { db } from "@/firebase";

/**
 * Adjust these paths if your components live elsewhere.
 * These should already exist in your repo based on your snippets.
 */
const WialonConfig = lazy(() => import("@/components/wialon/WialonConfig"));
const WialonStatus = lazy(() => import("@/components/wialon/WialonStatus"));

type TabId = "status" | "config" | "map" | "info";

interface Company {
  id: string;
  name: string;
}

/* ----------------------- small UI helpers ----------------------- */

const Spinner = () => (
  <div className="flex h-full min-h-[200px] items-center justify-center">
    <div className="flex items-center gap-2 text-gray-600">
      <RefreshCw className="h-5 w-5 animate-spin" />
      <span>Loading…</span>
    </div>
  </div>
);

class TabErrorBoundary extends React.Component<
  { label: string; children: React.ReactNode },
  { hasError: boolean; message?: string }
> {
  constructor(props: any) {
    super(props);
    this.state = { hasError: false, message: undefined };
  }
  static getDerivedStateFromError(err: any) {
    return { hasError: true, message: err?.message || String(err) };
  }
  componentDidCatch(err: any) {
    console.error(`[${this.props.label}] crashed:`, err);
  }
  render() {
    if (this.state.hasError) {
      return (
        <div className="m-4 rounded-md border border-red-200 bg-red-50 p-4 text-sm text-red-800">
          <div className="font-semibold">{this.props.label} failed to load</div>
          <div className="mt-1 text-red-700">{this.state.message}</div>
          <div className="mt-2 text-xs text-red-600">
            Check console for details. This tab is sandboxed and won’t affect others.
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

const TabButton: React.FC<{
  active: boolean;
  onClick: () => void;
  icon: React.ReactNode;
  label: string;
}> = ({ active, onClick, icon, label }) => (
  <button
    type="button"
    onClick={onClick}
    className={[
      "inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm font-medium transition",
      active
        ? "bg-blue-600 text-white shadow"
        : "border border-gray-200 bg-white text-gray-700 hover:bg-gray-50",
    ].join(" ")}
  >
    {icon}
    <span>{label}</span>
  </button>
);

/* ----------------------- Wialon Leaflet Map (embedded) ----------------------- */

declare global {
  interface Window {
    wialon: any;
    L: any;
    $: any;
  }
}

/**
 * Minimal map that lists units from Wialon and centers/marks the selected one.
 * Uses env-based token (no hard-coded secrets).
 *
 * Required env:
 *  - VITE_WIALON_SESSION_TOKEN
 * Optional env:
 *  - VITE_WIALON_HOST (default https://hosting.wialon.com/)
 *  - VITE_WIALON_LANG (default en)
 */
const WialonLeafletMap: React.FC = () => {
  const mapRef = useRef<HTMLDivElement>(null);
  const logRef = useRef<HTMLDivElement>(null);
  const selectRef = useRef<HTMLSelectElement>(null);
  const mapInstance = useRef<any>(null);
  const markerRef = useRef<any>(null);

  const HOST = (import.meta as any).env?.VITE_WIALON_HOST || "https://hosting.wialon.com/";
  const LANG = (import.meta as any).env?.VITE_WIALON_LANG || "en";
  const TOKEN = (import.meta as any).env?.VITE_WIALON_SESSION_TOKEN;

  const msg = (text: string) => {
    if (logRef.current) {
      logRef.current.innerHTML = text + "<br/>" + logRef.current.innerHTML;
    }
  };

  const ensureScript = (src: string) =>
    new Promise<void>((resolve, reject) => {
      if (document.querySelector(`script[src="${src}"]`)) return resolve();
      const s = document.createElement("script");
      s.src = src;
      s.onload = () => resolve();
      s.onerror = () => reject(new Error(`Failed to load ${src}`));
      document.head.appendChild(s);
    });

  const ensureCss = (href: string) => {
    if (document.querySelector(`link[href="${href}"]`)) return;
    const l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    document.head.appendChild(l);
  };

  const initMap = () => {
    if (!mapRef.current || !window.L) return;
    mapInstance.current = window.L.map(mapRef.current).setView([-26.2041, 28.0473], 6); // Johannesburg
    window.L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 19,
    }).addTo(mapInstance.current);
    msg("✅ Map ready");
  };

  const populateUnits = () => {
    const sess = window.wialon?.core?.Session?.getInstance();
    if (!sess) return;

    const flags =
      window.wialon.item.Item.dataFlag.base | window.wialon.item.Unit.dataFlag.lastMessage;

    sess.loadLibrary("itemIcon");
    sess.updateDataFlags(
      [{ type: "type", data: "avl_unit", flags, mode: 0 }],
      (code: number) => {
        if (code) {
          msg(`❌ ${window.wialon.core.Errors.getErrorText(code)}`);
          return;
        }
        const units = sess.getItems("avl_unit");
        if (!units?.length) {
          msg("⚠️ No units found");
          return;
        }
        if (selectRef.current) {
          selectRef.current.innerHTML = '<option value="">Select a unit…</option>';
          for (let i = 0; i < units.length; i++) {
            const opt = document.createElement("option");
            opt.value = units[i].getId();
            opt.textContent = units[i].getName();
            selectRef.current.appendChild(opt);
          }
        }
        msg(`✅ Loaded ${units.length} units`);
      }
    );
  };

  const showUnit = () => {
    const id = selectRef.current?.value;
    if (!id) return;

    const unit = window.wialon.core.Session.getInstance().getItem(parseInt(id, 10));
    const pos = unit?.getPosition?.();
    if (!unit || !pos) return;

    msg(
      `<img src='${unit.getIconUrl(32)}'/> ${unit.getName()} — ${pos.x.toFixed(5)}, ${pos.y.toFixed(
        5
      )} (speed ${pos.s || 0})`
    );

    if (!mapInstance.current) return;
    const icon = window.L.icon({ iconUrl: unit.getIconUrl(32), iconAnchor: [16, 16] });

    if (!markerRef.current) {
      markerRef.current = window.L.marker({ lat: pos.y, lng: pos.x }, { icon }).addTo(
        mapInstance.current
      );
    } else {
      markerRef.current.setLatLng({ lat: pos.y, lng: pos.x });
      markerRef.current.setIcon(icon);
    }
    mapInstance.current.setView({ lat: pos.y, lng: pos.x }, 15);
  };

  useEffect(() => {
    let mounted = true;

    (async () => {
      try {
        if (!TOKEN) {
          msg(
            "❌ Missing VITE_WIALON_SESSION_TOKEN. Add it to your .env and reload (e.g., VITE_WIALON_SESSION_TOKEN=YOUR_TOKEN)"
          );
          return;
        }

        // Modern Leaflet (1.9.x)
        ensureCss("https://unpkg.com/leaflet@1.9.4/dist/leaflet.css");
        await ensureScript("https://code.jquery.com/jquery-latest.min.js");
        await ensureScript("https://unpkg.com/leaflet@1.9.4/dist/leaflet.js");

        // Wialon SDK with token+lang in the URL, per SDK docs pattern.
        const sdkUrl = `${HOST}?token=${encodeURIComponent(
          TOKEN
        )}&lang=${encodeURIComponent(LANG)}/wsdk/script/wialon.js`;
        await ensureScript(sdkUrl);

        if (!mounted) return;

        // Init Wialon
        const sess = window.wialon.core.Session.getInstance();
        sess.initSession(`${HOST}?token=${encodeURIComponent(TOKEN)}&lang=${encodeURIComponent(LANG)}`);
        sess.loginToken(
          TOKEN,
          "",
          (code: number) => {
            if (code) {
              msg(`❌ Login failed: ${window.wialon.core.Errors.getErrorText(code)}`);
              return;
            }
            msg("✅ Wialon logged in");
            initMap();
            populateUnits();
          }
        );
      } catch (e: any) {
        console.error(e);
        msg(`❌ Failed to load dependencies: ${e?.message || e}`);
      }
    })();

    return () => {
      mounted = false;
      try {
        mapInstance.current?.remove?.();
      } catch {}
    };
  }, []);

  return (
    <div className="flex h-[calc(100vh-14rem)] min-h-[480px] flex-col">
      {/* Controls */}
      <div className="flex items-center justify-between gap-3 border-b bg-white px-4 py-3">
        <div className="flex items-center gap-2">
          <Satellite className="h-4 w-4 text-blue-600" />
          <div className="text-sm font-medium">Wialon Live Map</div>
        </div>
        <div className="flex items-center gap-2">
          <select
            ref={selectRef}
            onChange={showUnit}
            className="rounded border border-gray-300 bg-white px-2 py-1 text-sm"
          >
            <option value="">Select a unit…</option>
          </select>
          <button
            onClick={showUnit}
            className="rounded border border-gray-300 px-3 py-1.5 text-sm hover:bg-gray-50"
          >
            Show unit
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="flex flex-1 overflow-hidden">
        <div className="relative flex-1">
          <div ref={mapRef} className="absolute inset-0" />
        </div>
        <aside className="w-80 shrink-0 border-l bg-white">
          <div className="border-b px-4 py-3 text-sm font-semibold">Activity Log</div>
          <div
            ref={logRef}
            className="h-full max-h-[calc(100%-3rem)] overflow-auto p-3 text-xs"
            style={{ fontFamily: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace" }}
          />
        </aside>
      </div>
    </div>
  );
};

/* ----------------------- Page: Wialon Suite ----------------------- */

const WialonSuitePage: React.FC = () => {
  const [active, setActive] = useState<TabId>("status");
  const [companies, setCompanies] = useState<Company[]>([]);
  const [companyId, setCompanyId] = useState<string>("default");
  const [loadingCompanies, setLoadingCompanies] = useState<boolean>(true);

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setLoadingCompanies(true);
        const q = query(collection(db, "companies"), orderBy("name", "asc"));
        const snap = await getDocs(q);
        if (!mounted) return;
        setCompanies(snap.docs.map((d) => ({ id: d.id, name: (d.data().name as string) || d.id })));
      } catch (e) {
        console.error("Failed to load companies", e);
      } finally {
        mounted && setLoadingCompanies(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  return (
    <div className="flex h-[calc(100vh-4rem)] min-h-[720px] flex-col bg-gray-50">
      {/* Header */}
      <header className="flex items-center justify-between border-b border-gray-200 bg-white px-4 py-3">
        <div className="flex items-center gap-3">
          <MapIcon className="h-5 w-5 text-blue-600" />
          <h1 className="text-lg font-semibold text-gray-900">Wialon Suite</h1>
        </div>

        {/* Company selector (drives Config tab) */}
        <div className="flex items-center gap-2">
          <label className="flex items-center gap-2 text-sm text-gray-700">
            <Building2 className="h-4 w-4 text-gray-500" />
            <span className="hidden sm:inline">Company:</span>
            <select
              value={companyId}
              onChange={(e) => setCompanyId(e.target.value)}
              className="rounded border border-gray-300 bg-white px-2 py-1 text-sm"
              disabled={loadingCompanies}
            >
              <option value="default">System Default</option>
              {!loadingCompanies &&
                companies.map((c) => (
                  <option key={c.id} value={c.id}>
                    {c.name}
                  </option>
                ))}
            </select>
          </label>
        </div>
      </header>

      {/* Tabs */}
      <div className="border-b border-gray-200 bg-white">
        <div className="mx-auto flex max-w-screen-2xl flex-wrap items-center gap-2 px-4 py-2">
          <TabButton
            active={active === "status"}
            onClick={() => setActive("status")}
            icon={<RefreshCw className="h-4 w-4" />}
            label="Status"
          />
          <TabButton
            active={active === "config"}
            onClick={() => setActive("config")}
            icon={<Settings className="h-4 w-4" />}
            label="Config"
          />
          <TabButton
            active={active === "map"}
            onClick={() => setActive("map")}
            icon={<Satellite className="h-4 w-4" />}
            label="Map"
          />
          <TabButton
            active={active === "info"}
            onClick={() => setActive("info")}
            icon={<InfoIcon className="h-4 w-4" />}
            label="Info"
          />
        </div>
      </div>

      {/* Body */}
      <div className="flex-1 overflow-auto">
        <Suspense fallback={<Spinner />}>
          {active === "status" && (
            <TabErrorBoundary label="Wialon Status">
              <div className="p-4">
                {/* Uses your hooks inside (useWialonConnection/useWialonUnits) */}
                <WialonStatus showDetails showUnitsCount />
              </div>
            </TabErrorBoundary>
          )}

          {active === "config" && (
            <TabErrorBoundary label="Wialon Config">
              <div className="p-4">
                {/* Company-specific save location: integrationConfig/wialon-${companyId} */}
                <WialonConfig companyId={companyId} />
              </div>
            </TabErrorBoundary>
          )}

          {active === "map" && (
            <TabErrorBoundary label="Wialon Map">
              <div className="p-4">
                <WialonLeafletMap />
              </div>
            </TabErrorBoundary>
          )}

          {active === "info" && (
            <TabErrorBoundary label="About">
              <div className="p-6">
                <div className="mx-auto max-w-2xl rounded-lg border border-blue-100 bg-blue-50 p-4 text-sm">
                  <h3 className="mb-2 font-semibold text-blue-800">About Wialon Suite</h3>
                  <ul className="list-disc pl-5 text-blue-800">
                    <li>
                      <span className="font-medium">Status</span> — shows session connectivity, server
                      time, token expiry, and live unit count.
                    </li>
                    <li>
                      <span className="font-medium">Config</span> — saves Wialon settings per company
                      under <code>integrationConfig/wialon-{"{companyId}"}</code>.
                    </li>
                    <li>
                      <span className="font-medium">Map</span> — loads Leaflet + Wialon SDK on demand;
                      pick a unit to center and track.
                    </li>
                  </ul>
                  <div className="mt-3 text-xs text-blue-700">
                    Ensure <code>VITE_WIALON_SESSION_TOKEN</code> is set in your <code>.env</code>. You
                    can also set <code>VITE_WIALON_HOST</code> (defaults to Wialon Hosting) and{" "}
                    <code>VITE_WIALON_LANG</code> (defaults to <code>en</code>).
                  </div>
                </div>
              </div>
            </TabErrorBoundary>
          )}
        </Suspense>
      </div>
    </div>
  );
};

export default WialonSuitePage;
